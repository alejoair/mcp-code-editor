name: Release to PyPI

on:
  # Manual trigger for releases
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_pypi:
        description: 'Skip PyPI publication (for testing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write

jobs:
  # Job para bump version, crear release y publicar en PyPI
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Check if current version tag exists
      id: check_current_tag
      run: |
        if git rev-parse "refs/tags/${{ steps.current_version.outputs.tag }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ Tag ${{ steps.current_version.outputs.tag }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Tag ${{ steps.current_version.outputs.tag }} does not exist"
        fi
    
    - name: Bump version
      id: bump_version
      run: |
        echo "🔄 Bumping version: ${{ github.event.inputs.version_type }}"
        bump2version ${{ github.event.inputs.version_type }} --verbose
        NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "✅ Version bumped to: $NEW_VERSION"
    
    - name: Push changes and tags
      run: |
        echo "📤 Pushing changes and tags to repository"
        git push origin HEAD:master
        git push origin --tags
    
    - name: Build package
      run: |
        echo "🔨 Building package"
        python -m build
    
    - name: Check package
      run: |
        echo "🔍 Checking package integrity"
        python -m twine check dist/*
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog"
        # Simple changelog generation - you can enhance this
        COMMITS=$(git log ${{ steps.current_version.outputs.tag }}..HEAD --pretty=format:"- %s" --reverse | head -20)
        if [ -z "$COMMITS" ]; then
          COMMITS="- Version bump and maintenance updates"
        fi
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.bump_version.outputs.new_tag }}
        name: Release ${{ steps.bump_version.outputs.new_tag }}
        body: |
          ## 🚀 Release ${{ steps.bump_version.outputs.new_version }}
          
          ### Changes in this release:
          ${{ steps.changelog.outputs.commits }}
          
          ### Installation:
          ```bash
          pip install mcp-code-editor==${{ steps.bump_version.outputs.new_version }}
          ```
          
          ### Quick Start:
          ```bash
          mcp-code-editor
          ```
          
          ### Links:
          - 📦 [PyPI Package](https://pypi.org/project/mcp-code-editor/${{ steps.bump_version.outputs.new_version }}/)
          - 📖 [Documentation](https://alejoair.github.io/mcp-code-editor/)
          - 🐛 [Report Issues](https://github.com/alejoair/mcp-code-editor/issues)
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      if: ${{ !github.event.inputs.skip_pypi }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
    
    - name: Notify success
      run: |
        echo "🎉 Successfully released version ${{ steps.bump_version.outputs.new_version }}!"
        if [ "${{ github.event.inputs.skip_pypi }}" != "true" ]; then
          echo "📦 Package published to PyPI: https://pypi.org/project/mcp-code-editor/${{ steps.bump_version.outputs.new_version }}/"
        else
          echo "⚠️ PyPI publication skipped as requested"
        fi
        echo "🏷️ GitHub Release: https://github.com/alejoair/mcp-code-editor/releases/tag/${{ steps.bump_version.outputs.new_tag }}"
        echo "📖 Documentation: https://alejoair.github.io/mcp-code-editor/"
