name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8 (if available)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        if command -v flake8 &> /dev/null; then
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        else
          echo "‚ö†Ô∏è flake8 not installed, skipping linting"
        fi
    
    - name: Test with pytest (if available)
      run: |
        if command -v pytest &> /dev/null; then
          pytest --cov=mcp_code_editor --cov-report=term-missing
        else
          echo "‚ö†Ô∏è pytest not installed, skipping tests"
          echo "‚úÖ Basic import test"
          python -c "import mcp_code_editor; print(f'‚úÖ MCP Code Editor v{mcp_code_editor.__version__} imported successfully')"
        fi
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*

  validate-version:
    name: Validate Version Consistency
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Check version consistency
      run: |
        # Get version from pyproject.toml
        PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        # Get version from __init__.py
        INIT_VERSION=$(python -c "import sys; sys.path.insert(0, '.'); import mcp_code_editor; print(mcp_code_editor.__version__)")
        
        # Get version from .bumpversion.cfg
        BUMP_VERSION=$(grep "current_version" .bumpversion.cfg | cut -d' ' -f3)
        
        echo "üì¶ pyproject.toml version: $PYPROJECT_VERSION"
        echo "üêç __init__.py version: $INIT_VERSION"
        echo "üîÑ .bumpversion.cfg version: $BUMP_VERSION"
        
        if [ "$PYPROJECT_VERSION" = "$INIT_VERSION" ] && [ "$PYPROJECT_VERSION" = "$BUMP_VERSION" ]; then
          echo "‚úÖ All versions are consistent: $PYPROJECT_VERSION"
        else
          echo "‚ùå Version mismatch detected!"
          echo "  pyproject.toml: $PYPROJECT_VERSION"
          echo "  __init__.py: $INIT_VERSION"
          echo "  .bumpversion.cfg: $BUMP_VERSION"
          exit 1
        fi
